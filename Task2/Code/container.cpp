//------------------------------------------------------------------------------
// container_Constr.cpp - содержит функции обработки контейнера
//------------------------------------------------------------------------------

#include "container.h"

//------------------------------------------------------------------------------
// Конструктор контейнера
Container::Container() : len{0} {}

//------------------------------------------------------------------------------
// Деструктор контейнера
Container::~Container() {
    Clear();
}

//------------------------------------------------------------------------------
// Очистка контейнера от элементов (освобождение памяти)
void Container::Clear() {
    for (int i = 0; i < len; i++) {
        delete cont[i];
    }
    len = 0;
}

//------------------------------------------------------------------------------
// Ввод содержимого контейнера из указанного потока
void Container::In(ifstream &ifst) {
    while (!ifst.eof()) {
        if ((cont[len] = Language::StaticIn(ifst)) != 0) {
            len++;
        }
    }
}

//------------------------------------------------------------------------------
// Случайный ввод содержимого контейнера
void Container::InRnd(int size) {
    while (len < size) {
        if ((cont[len] = Language::StaticInRnd()) != nullptr) {
            len++;
        }
    }
}

//------------------------------------------------------------------------------
// Вывод содержимого контейнера в указанный поток
void Container::Out(ofstream &ofst) {
    ofst << "Container contains " << len << " elements.\n";
    for (int i = 0; i < len; i++) {
        ofst << i << ":\t";
        cont[i]->Out(ofst);
    }
}

//------------------------------------------------------------------------------
// Сортировка языков программирования по их частному
void Container::Quicksort() {
    Quicksort(cont, len);
}

void Container::Quicksort(Language *mas[], int size) {
    //Указатели в начало и в конец массива
    int i = 0;
    int j = size - 1;

    //Центральный элемент массива
    double mid = mas[size / 2]->Quotient();

    do {
        //В левой части массива оставляем на месте элементы, которые больше центрального
        while (mas[i]->Quotient() > mid) {
            i++;
        }
        // В правой части пропускаем элементы, которые меньше центрального
        while (mas[j]->Quotient() < mid) {
            j--;
        }

        // Меняем элементы местами
        if (i <= j) {
            Language *tmp = mas[i];
            mas[i] = mas[j];
            mas[j] = tmp;

            i++;
            j--;
        }
    } while (i <= j);

    if (j > 0) {
        Quicksort(mas, j + 1);
    }
    if (i < size) {
        Quicksort(&mas[i], size - i);
    }
}
