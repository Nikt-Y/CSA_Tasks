//------------------------------------------------------------------------------
// container_Constr.cpp - содержит функции обработки контейнера
//------------------------------------------------------------------------------

#include "container.h"

//------------------------------------------------------------------------------
// Инициализация контейнера
void Init(container &c) {
    c.len = 0;
}

//------------------------------------------------------------------------------
// Очистка контейнера от элементов (освобождение памяти)
void Clear(container &c) {
    c.len = 0;
}

//------------------------------------------------------------------------------
// Ввод содержимого контейнера из указанного потока
void In(container &c, ifstream &ifst) {
    while (!ifst.eof()) {
        if (In(c.cont[c.len], ifst)) {
            c.len++;
        }
    }
}

//------------------------------------------------------------------------------
// Случайный ввод содержимого контейнера
void InRnd(container &c, int size) {
    while (c.len < size) {
        if (InRnd(c.cont[c.len])) {
            c.len++;
        }
    }
}

//------------------------------------------------------------------------------
// Вывод содержимого контейнера в указанный поток
void Out(container &c, ofstream &ofst) {
    ofst << "Container contains " << c.len << " elements." << endl;
    for (int i = 0; i < c.len; i++) {
        ofst << i << ":\t";
        Out(c.cont[i], ofst);
    }
}

//------------------------------------------------------------------------------
// Сортировка языков программирования по их частному
void Quicksort(language mas[], int size) {
    //Указатели в начало и в конец массива
    int i = 0;
    int j = size - 1;

    //Центральный элемент массива
    double mid = Quotient(mas[size / 2]);

    do {
        //В левой части массива оставляем на месте элементы, которые больше центрального
        while (Quotient(mas[i]) > mid) {
            i++;
        }
        // В правой части пропускаем элементы, которые меньше центрального
        while (Quotient(mas[j]) < mid) {
            j--;
        }

        // Меняем элементы местами
        if (i <= j) {
            language tmp = mas[i];
            mas[i] = mas[j];
            mas[j] = tmp;

            i++;
            j--;
        }
    } while (i <= j);

    if (j > 0) {
        Quicksort(mas, j + 1);
    }
    if (i < size) {
        Quicksort(&mas[i], size - i);
    }
}

